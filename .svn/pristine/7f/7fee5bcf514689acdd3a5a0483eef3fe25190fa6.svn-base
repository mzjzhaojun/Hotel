package com.yichuang.kyjd.rest.controller.order_info;

import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import com.yichuang.kyjd.commnd.base.impl.BaseController;
import com.yichuang.kyjd.commnd.system.util.SubNumUtil;
import com.yichuang.kyjd.commnd.web.StaticSources;
import net.sf.json.JSONObject;
import com.yichuang.kyjd.rest.service.order_info.impl.Order_infoServiceImpl;
import com.yichuang.kyjd.rest.entity.customer.Customer;
import com.yichuang.kyjd.rest.entity.order_info.Order;
import com.yichuang.kyjd.rest.entity.order_info.Order_info;

/**
 * @author zj default test
 * 
 * @version 1.1
 */

@Controller
@RequestMapping("/rest/orderinfo")
public class OrderInfoController extends BaseController<Order_info, Integer> {

	@Autowired
	private Order_infoServiceImpl service;

	@Autowired
	public void setBaseService() {
		setBaseService(service);
	}

	/**
	 * custom
	 * 
	 * @version 1.1
	 */
	@RequestMapping(value = "/param1", method = RequestMethod.GET)
	public void customSelect(HttpServletRequest request,
			HttpServletResponse response) {
		try {
			String json = request.getParameter(StaticSources.JSONVO);
			Order_info u = null;
			if (json != null) {
				u = (Order_info) JSONObject.toBean(JSONObject.fromObject(json),
						Order_info.class);
			}
			List<Order_info> list = service.selectOrder_info(u);
			super.setSuccess(list);
		} catch (Exception e) {
			super.setError(e.getMessage());
		}
		super.ResponseJson(response);
	}

	@RequestMapping(value = "/submitorder", method = RequestMethod.GET)
	public void submitorder(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Customer cust = (Customer) session.getAttribute("cust");
		try {
			String json = request.getParameter(StaticSources.JSONVO);
			Order u = null;
			if (json != null) {
				u = (Order) JSONObject.toBean(JSONObject
						.fromObject(new String(json.getBytes("ISO-8859-1"),
								"UTF-8")),
						Order.class);
			}
			u.setAccount(cust.getAccout());
			u.setNo(SubNumUtil.getSubNumCode());
			super.setSuccess(service.insertOrder_info(u));
		} catch (Exception e) {
			super.setError(e.getMessage());
		}
		super.ResponseJson(response);
	}
	
	@RequestMapping(value = "/privatesubmitorder", method = RequestMethod.GET)
	public void privatesubmitorder(HttpServletRequest request,
			HttpServletResponse response) {
		try {
			String json = request.getParameter(StaticSources.JSONVO);
			Order u = null;
			if (json != null) {
				u = (Order) JSONObject.toBean(JSONObject
						.fromObject(new String(json.getBytes("ISO-8859-1"),
								"UTF-8")),
						Order.class);
			}
			u.setNo(SubNumUtil.getSubNumCode());
			super.setSuccess(service.insertOrder_info(u));
		} catch (Exception e) {
			super.setError(e.getMessage());
		}
		super.ResponseJson(response);
	}

	@RequestMapping(value = "/roomorder", method = RequestMethod.GET)
	public void roomorder(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		try {
			Customer cust = (Customer) session.getAttribute("cust");
			Order u = new Order();
			u.setType("D__1q1b8nb3y5ez");
			u.setAccount(cust.getAccout());
			super.setSuccess(service.selectOrderRoom(u));
		} catch (Exception e) {
			super.setError(e.getMessage());
		}
		super.ResponseJson(response);
	}
	@RequestMapping(value = "/selectOrder", method = RequestMethod.GET)
	public void selectOrder(HttpServletRequest request,
			HttpServletResponse response) {
		try {
			String json = request.getParameter(StaticSources.JSONVO);
			Order u = null;
			if (json != null) {
				u = (Order) JSONObject.toBean(JSONObject.fromObject(json),
						Order.class);
			}
			super.setSuccess(service.selectOrder(u));
		} catch (Exception e) {
			super.setError(e.getMessage());
		}
		super.ResponseJson(response);
	}
	@RequestMapping(value = "/updateorder", method = RequestMethod.GET)
	public void updateOrder(HttpServletRequest request,
			HttpServletResponse response) {
		try {
			String json = request.getParameter(StaticSources.JSONVO);
			Order u = null;
			if (json != null) {
				u = (Order) JSONObject.toBean(JSONObject
						.fromObject(new String(json.getBytes("ISO-8859-1"),
								"UTF-8")),
						Order.class);
			}
			service.updateOrder(u);
		} catch (Exception e) {
			super.setError(e.getMessage());
		}
		super.ResponseJson(response);
	}
}
