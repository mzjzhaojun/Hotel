package com.yichuang.kyjd.rest.controller.pay;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLDecoder;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.yichuang.kyjd.commnd.alipay.client.base.ClientConfig;
import com.yichuang.kyjd.commnd.alipay.client.base.ResponseResult;
import com.yichuang.kyjd.commnd.alipay.client.security.SecurityManagerImpl;
import com.yichuang.kyjd.commnd.alipay.client.util.ParameterUtil;
import com.yichuang.kyjd.commnd.alipay.client.util.StringUtil;
import com.yichuang.kyjd.commnd.alipay.client.util.XMapUtil;
import com.yichuang.kyjd.commnd.alipay.client.vo.DirectTradeCreateRes;
import com.yichuang.kyjd.commnd.alipay.client.vo.ErrorCode;
import com.yichuang.kyjd.commnd.base.impl.BaseController;
import com.yichuang.kyjd.rest.service.coupon.impl.CouponServiceImpl;
import com.yichuang.kyjd.rest.entity.coupon.Coupon;

/**
 * @author zj default test
 * 
 * @version 1.1
 */

@Controller
@RequestMapping("/rest/pay")
public class PayController extends BaseController<Coupon, Integer> {

	@Autowired
	private CouponServiceImpl service;

	@Autowired
	public void setBaseService() {
		setBaseService(service);
	}

	// 安全管理类
	private com.yichuang.kyjd.commnd.alipay.client.security.SecurityManager securityManager = new SecurityManagerImpl();

	/**
	 * paymoney
	 * 
	 * @version 1.1
	 */
	@RequestMapping(value = "/paymoney", method = RequestMethod.GET)
	public void paymoney(HttpServletRequest request, HttpServletResponse response) {
		try {
			Map<String, String> reqParams = prepareTradeRequestParamsMap(request);

			String signAlgo = request.getParameter("sec_id").trim();
			String key = request.getParameter("key").trim();
			String reqUrl = request.getParameter("req_url").trim();
			ClientConfig.setMd5Key(key);
			ClientConfig.setMd5SignAlgo(signAlgo);

			String sign = sign(reqParams, signAlgo, key);

			reqParams.put("sign", sign);
			/*
			 * String encryptedReqData = ""; encryptedReqData =
			 * encryptReqData(reqParams.get("req_data"));
			 * reqParams.put("req_data", encryptedReqData);
			 */
			ResponseResult resResult = new ResponseResult();
			String businessResult = "";

			try {
				resResult = send(reqParams, reqUrl, signAlgo, key);
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			if (resResult.isSuccess()) {
				businessResult = resResult.getBusinessResult();
				System.out.println("业务成功结果:" + businessResult);
			} else {
				return;
			}
			DirectTradeCreateRes directTradeCreateRes = null;
			XMapUtil.register(DirectTradeCreateRes.class);

			try {
				directTradeCreateRes = (DirectTradeCreateRes) XMapUtil
						.load(new ByteArrayInputStream(businessResult
								.getBytes("UTF-8")));
			} catch (UnsupportedEncodingException e) {
			} catch (Exception e) {
			}
			// 开放平台返回的内容中取出request_token（对返回的内容要先用私钥解密，再用支付宝的公钥验签名）
			String requestToken = directTradeCreateRes.getRequestToken();
			Map<String, String> authParams = prepareAuthParamsMap(request,
					requestToken);
			String authSign = sign(authParams, signAlgo, key);
			authParams.put("sign", authSign);
			String redirectURL = "";
			try {
				redirectURL = getRedirectUrl(authParams, reqUrl);
				System.out.println("跳转地址:" + redirectURL);
			} catch (Exception e) {
				e.printStackTrace();
			}
			if (StringUtil.isNotBlank(redirectURL)) {
				response.sendRedirect(redirectURL);
				return;
			}

		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * notify
	 * 
	 * @version 1.1
	 */
	@SuppressWarnings("rawtypes")
	@RequestMapping(value = "/notify", method = RequestMethod.GET)
	public void notify(HttpServletRequest request, HttpServletResponse response)
			throws IOException {

		System.out.println("接收到通知!");
		// 获得通知参数
		Map map = request.getParameterMap();
		// 获得通知签名
		String sign = (String) ((Object[]) map.get("sign"))[0];
		// 获得待验签名的数据
		String verifyData = getVerifyData(map);

		boolean verified = false;
		// 验签名
		try {
			verified = securityManager.verify(ClientConfig.md5SignAlgo,
					verifyData, sign, ClientConfig.md5Key);
		} catch (Exception e) {
			e.printStackTrace();
		}
		PrintWriter out = response.getWriter();
		// 验证签名通过
		if (verified) {
			// TODO 根据交易状态处理业务逻辑
			// 当交易状态成功，处理业务逻辑成功。回写success
			System.out.println("接收支付宝系统通知验证签名成功！");
			out.print("success");
		} else {
			System.out.println("接收支付宝系统通知验证签名失败，请检检查！");
			out.print("fail");
		}
	}
	
	/**
	 * callback
	 * 
	 * @version 1.1
	 */
	@RequestMapping(value = "/callback", method = RequestMethod.GET)
	public void callback(HttpServletRequest request, HttpServletResponse response) {
        String sign = request.getParameter("sign");
        String result = request.getParameter("result");
        String requestToken = request.getParameter("request_token");
        String outTradeNo = request.getParameter("out_trade_no");
        String tradeNo = request.getParameter("trade_no");
        Map<String,String> resMap  = new HashMap<String,String>();
        resMap.put("result", result);
        resMap.put("request_token", requestToken);
        resMap.put("out_trade_no", outTradeNo);
        resMap.put("trade_no", tradeNo);
        String verifyData = ParameterUtil.getSignData(resMap);
        boolean verified = false;

        try {
            verified = securityManager.verify(ClientConfig.md5SignAlgo, verifyData, sign,
            		ClientConfig.md5Key);
            
	        PrintWriter out = response.getWriter();
	        response.setContentType("text/html");
	        if (!verified || !result.equals("success")) {
	        	out.println("Illegal sign!!");
	        } else {
	        	out.println("Md5 signature verification success!!");
	        	out.println("Do SomeThing!!");
	        }
	        out.flush();
			out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

	/**
	 * 准备alipay.wap.trade.create.direct服务的参数
	 * 
	 * @param request
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	private Map<String, String> prepareTradeRequestParamsMap(
			HttpServletRequest request) throws UnsupportedEncodingException {
		Map<String, String> requestParams = new HashMap<String, String>();
		request.setCharacterEncoding("utf-8");
		// 商品名称
		String subject = request.getParameter("subject").trim();
		// 外部交易号
		String outTradeNo = request.getParameter("out_trade_no").trim();
		// 商品总价
		String totalFee = request.getParameter("total_fee").trim();
		// 卖家帐号
		String sellerAccountName = request.getParameter("seller_account_name")
				.trim();
		// 外部用户ID
		String outUser = request.getParameter("out_user").trim();
		// 支付成功跳转链接
		String callBackUrl = request.getParameter("call_back_url");
		// 接收支付宝发送的通知的url
		String notifyUrl = request.getParameter("notify_url").trim();
		// 未完成支付，用户点击链接返回商户
		String merchantUrl = request.getParameter("merchant_url").trim();
		// req_data的内容
		String reqData = "<direct_trade_create_req>" + "<subject>" + subject
				+ "</subject><out_trade_no>" + outTradeNo
				+ "</out_trade_no><total_fee>" + totalFee
				+ "</total_fee><seller_account_name>" + sellerAccountName
				+ "</seller_account_name><call_back_url>" + callBackUrl
				+ "</call_back_url><notify_url>" + notifyUrl
				+ "</notify_url><out_user>" + outUser
				+ "</out_user><merchant_url>" + merchantUrl
				+ "</merchant_url></direct_trade_create_req>";
		requestParams.put("req_data", reqData);
		requestParams.put("req_id", System.currentTimeMillis() + "");
		requestParams.putAll(prepareCommonParams(request));
		System.out.println("prepareTradeRequestParamsMap" + requestParams);
		return requestParams;
	}

	/**
	 * 准备alipay.wap.auth.authAndExecute服务的参数
	 * 
	 * @param request
	 * @param requestToken
	 * @return
	 */
	private Map<String, String> prepareAuthParamsMap(
			HttpServletRequest request, String requestToken) {
		Map<String, String> requestParams = new HashMap<String, String>();
		String reqData = "<auth_and_execute_req><request_token>" + requestToken
				+ "</request_token></auth_and_execute_req>";
		requestParams.put("req_data", reqData);
		requestParams.putAll(prepareCommonParams(request));
		requestParams.put("service", "alipay.wap.auth.authAndExecute");
		return requestParams;
	}

	/**
	 * 准备通用参数
	 * 
	 * @param request
	 * @return
	 */
	private Map<String, String> prepareCommonParams(HttpServletRequest request) {
		Map<String, String> commonParams = new HashMap<String, String>();
		String service = request.getParameter("service");
		commonParams.put("service", service);
		String secId = request.getParameter("sec_id");
		commonParams.put("sec_id", secId);
		String partner = request.getParameter("partner_id");
		commonParams.put("partner", partner);
		String format = request.getParameter("format");
		commonParams.put("format", format);
		String v = request.getParameter("version");
		commonParams.put("v", v);
		System.out.println("prepareCommonParams" + commonParams);
		return commonParams;
	}

	/**
	 * 对参数进行签名
	 * 
	 * @param reqParams
	 * @return
	 */
	private String sign(Map<String, String> reqParams, String signAlgo,
			String key) {

		String signData = ParameterUtil.getSignData(reqParams);
		String sign = "";
		try {
			sign = securityManager.sign(signAlgo, signData, key);
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		return sign;
	}

	/**
	 * 调用alipay.wap.auth.authAndExecute服务的时候需要跳转到支付宝的页面，组装跳转url
	 * 
	 * @param reqParams
	 * @return
	 * @throws Exception
	 */
	private String getRedirectUrl(Map<String, String> reqParams, String reqUrl)
			throws Exception {
		String redirectUrl = reqUrl + "?";
		redirectUrl = redirectUrl + ParameterUtil.mapToUrl(reqParams);
		return redirectUrl;
	}

	/**
	 * 调用支付宝开放平台的服务
	 * 
	 * @param reqParams
	 *            请求参数
	 * @return
	 * @throws Exception
	 */
	private ResponseResult send(Map<String, String> reqParams, String reqUrl,
			String secId, String key) throws Exception {
		String response = "";
		String invokeUrl = reqUrl + "?";
		URL serverUrl = new URL(invokeUrl);
		HttpURLConnection conn = (HttpURLConnection) serverUrl.openConnection();

		conn.setRequestMethod("POST");
		conn.setDoOutput(true);
		conn.connect();
		String params = ParameterUtil.mapToUrl(reqParams);
		conn.getOutputStream().write(params.getBytes());

		InputStream is = conn.getInputStream();

		BufferedReader in = new BufferedReader(new InputStreamReader(is));
		StringBuffer buffer = new StringBuffer();
		String line = "";
		while ((line = in.readLine()) != null) {
			buffer.append(line);
		}
		response = URLDecoder.decode(buffer.toString(), "utf-8");
		conn.disconnect();
		return praseResult(response, secId, key);
	}

	/**
	 * 解析支付宝返回的结果
	 * 
	 * @param response
	 * @return
	 * @throws Exception
	 */
	private ResponseResult praseResult(String response, String secId, String key)
			throws Exception {
		// 调用成功
		HashMap<String, String> resMap = new HashMap<String, String>();
		String v = ParameterUtil.getParameter(response, "v");
		String service = ParameterUtil.getParameter(response, "service");
		String partner = ParameterUtil.getParameter(response, "partner");
		// String secId = ParameterUtil.getParameter(response, "sec_id");
		String sign = ParameterUtil.getParameter(response, "sign");
		String reqId = ParameterUtil.getParameter(response, "req_id");
		resMap.put("v", v);
		resMap.put("service", service);
		resMap.put("partner", partner);
		resMap.put("sec_id", secId);
		resMap.put("req_id", reqId);
		String businessResult = "";
		ResponseResult result = new ResponseResult();
		if (response.contains("<err>")) {
			result.setSuccess(false);
			businessResult = ParameterUtil.getParameter(response, "res_error");

			// 转换错误信息
			XMapUtil.register(ErrorCode.class);
			ErrorCode errorCode = (ErrorCode) XMapUtil
					.load(new ByteArrayInputStream(businessResult
							.getBytes("UTF-8")));
			result.setErrorMessage(errorCode);

			resMap.put("res_error",
					ParameterUtil.getParameter(response, "res_error"));
		} else {
			businessResult = ParameterUtil.getParameter(response, "res_data");
			result.setSuccess(true);
			result.setBusinessResult(businessResult);
			resMap.put("res_data", businessResult);
		}
		String verifyData = ParameterUtil.getSignData(resMap);

		System.out.println(verifyData);
		boolean verified = securityManager.verify(secId, verifyData, sign, key);

		if (!verified) {
			throw new Exception("验证签名失败");
		}
		return result;
	}

	/**
	 * 获得验签名的数据
	 * 
	 * @param map
	 * @return
	 */
	private String getVerifyData(@SuppressWarnings("rawtypes") Map map) {
		String service = (String) ((Object[]) map.get("service"))[0];
		String v = (String) ((Object[]) map.get("v"))[0];
		String sec_id = (String) ((Object[]) map.get("sec_id"))[0];
		String notify_data = (String) ((Object[]) map.get("notify_data"))[0];
		System.out.println("通知参数为：" + "service=" + service + "&v=" + v
				+ "&sec_id=" + sec_id + "&notify_data=" + notify_data);
		return "service=" + service + "&v=" + v + "&sec_id=" + sec_id
				+ "&notify_data=" + notify_data;
	}

}
